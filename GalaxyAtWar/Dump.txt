#1: WarStatus [WarStatus]
{
   fields {
      #2: systems = System.Collections.Generic.List`1[SystemStatus] [System.Collections.Generic.List`1[SystemStatus]]
      {
         properties {
            System.Collections.Generic.ICollection<T>.IsReadOnly = False [System.Boolean]
            System.Collections.ICollection.IsSynchronized = False [System.Boolean]
            System.Collections.ICollection.SyncRoot = System.Collections.Generic.List`1[SystemStatus] [System.Collections.Generic.List`1[SystemStatus]] (see #2)
            System.Collections.IList.IsFixedSize = False [System.Boolean]
            System.Collections.IList.IsReadOnly = False [System.Boolean]
            Capacity = 256 [System.Int32]
            Count = 170 [System.Int32]
         }
         fields {
            #3: _items [SystemStatus[]]
            {
               properties {
                  Length = 256 [System.Int32]
                  LongLength = 256 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [SystemStatus[]] (see #3)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            _size = 170 [System.Int32]
            _version = 170 [System.Int32]
         }
      }
      #4: relationTracker [RelationTracker]
      {
         fields {
            #5: factions = System.Collections.Generic.List`1[KillListTracker] [System.Collections.Generic.List`1[KillListTracker]]
            {
               properties {
                  System.Collections.Generic.ICollection<T>.IsReadOnly = False [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.List`1[KillListTracker] [System.Collections.Generic.List`1[KillListTracker]] (see #5)
                  System.Collections.IList.IsFixedSize = False [System.Boolean]
                  System.Collections.IList.IsReadOnly = False [System.Boolean]
                  Capacity = 64 [System.Int32]
                  Count = 52 [System.Int32]
               }
               fields {
                  #6: _items [KillListTracker[]]
                  {
                     properties {
                        Length = 64 [System.Int32]
                        LongLength = 64 [System.Int64]
                        Rank = 1 [System.Int32]
                        IsSynchronized = False [System.Boolean]
                        SyncRoot [KillListTracker[]] (see #6)
                        IsFixedSize = True [System.Boolean]
                        IsReadOnly = False [System.Boolean]
                     }
                  }
                  _size = 52 [System.Int32]
                  _version = 52 [System.Int32]
               }
            }
         }
      }
      #7: factionTracker = System.Collections.Generic.List`1[Core+WarFaction] [System.Collections.Generic.List`1[Core+WarFaction]]
      {
         properties {
            System.Collections.Generic.ICollection<T>.IsReadOnly = False [System.Boolean]
            System.Collections.ICollection.IsSynchronized = False [System.Boolean]
            System.Collections.ICollection.SyncRoot = System.Collections.Generic.List`1[Core+WarFaction] [System.Collections.Generic.List`1[Core+WarFaction]] (see #7)
            System.Collections.IList.IsFixedSize = False [System.Boolean]
            System.Collections.IList.IsReadOnly = False [System.Boolean]
            Capacity = 16 [System.Int32]
            Count = 11 [System.Int32]
         }
         fields {
            #8: _items [Core+WarFaction[]]
            {
               properties {
                  Length = 16 [System.Int32]
                  LongLength = 16 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [Core+WarFaction[]] (see #8)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            _size = 11 [System.Int32]
            _version = 11 [System.Int32]
         }
      }
      #9: attackTargets = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
      {
         properties {
            #10: System.Collections.Generic.IDictionary<TKey,TValue>.Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+50 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
               }
            }
            #11: System.Collections.Generic.IDictionary<TKey,TValue>.Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+52 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
               }
            }
            #12: System.Collections.IDictionary.Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+50 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
               }
            }
            #13: System.Collections.IDictionary.Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+52 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
               }
            }
            System.Collections.IDictionary.IsFixedSize = False [System.Boolean]
            System.Collections.IDictionary.IsReadOnly = False [System.Boolean]
            System.Collections.ICollection.IsSynchronized = False [System.Boolean]
            System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
            System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly = False [System.Boolean]
            Count = 0 [System.Int32]
            #14: Comparer = System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction (+1 chars) [System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction]]
            #15: Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+50 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
               }
            }
            #16: Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+52 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #9)
               }
            }
         }
         fields {
            #17: table [System.Int32[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [System.Int32[]] (see #17)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #18: linkSlots [System.Collections.Generic.Link[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [System.Collections.Generic.Link[]] (see #18)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #19: keySlots [BattleTech.Faction[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [BattleTech.Faction[]] (see #19)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #20: valueSlots = System.Collections.Generic.List`1[BattleTech.StarSystem][] [System.Collections.Generic.List`1[BattleTech.StarSystem][]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot = System.Collections.Generic.List`1[BattleTech.StarSystem][] [System.Collections.Generic.List`1[BattleTech.StarSystem][]] (see #20)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            touchedSlots = 0 [System.Int32]
            emptySlot = -1 [System.Int32]
            count = 0 [System.Int32]
            threshold = 10 [System.Int32]
            hcp = System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction (+1 chars) [System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction]] (see #14)
            serialization_info = <null>
            generation = 0 [System.Int32]
         }
      }
      #21: defenseTargets = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
      {
         properties {
            #22: System.Collections.Generic.IDictionary<TKey,TValue>.Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+50 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
               }
            }
            #23: System.Collections.Generic.IDictionary<TKey,TValue>.Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+52 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
               }
            }
            #24: System.Collections.IDictionary.Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+50 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
               }
            }
            #25: System.Collections.IDictionary.Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+52 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
               }
            }
            System.Collections.IDictionary.IsFixedSize = False [System.Boolean]
            System.Collections.IDictionary.IsReadOnly = False [System.Boolean]
            System.Collections.ICollection.IsSynchronized = False [System.Boolean]
            System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
            System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly = False [System.Boolean]
            Count = 0 [System.Int32]
            Comparer = System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction (+1 chars) [System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction]] (see #14)
            #26: Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+50 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
               }
            }
            #27: Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+52 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+36 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.List`1[BattleTech.StarSystem]]] (see #21)
               }
            }
         }
         fields {
            #28: table [System.Int32[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [System.Int32[]] (see #28)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #29: linkSlots [System.Collections.Generic.Link[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [System.Collections.Generic.Link[]] (see #29)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #30: keySlots [BattleTech.Faction[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [BattleTech.Faction[]] (see #30)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #31: valueSlots = System.Collections.Generic.List`1[BattleTech.StarSystem][] [System.Collections.Generic.List`1[BattleTech.StarSystem][]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot = System.Collections.Generic.List`1[BattleTech.StarSystem][] [System.Collections.Generic.List`1[BattleTech.StarSystem][]] (see #31)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            touchedSlots = 0 [System.Int32]
            emptySlot = -1 [System.Int32]
            count = 0 [System.Int32]
            threshold = 10 [System.Int32]
            hcp = System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction (+1 chars) [System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction]] (see #14)
            serialization_info = <null>
            generation = 0 [System.Int32]
         }
      }
      #32: attackResources = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]]
      {
         properties {
            #33: System.Collections.Generic.IDictionary<TKey,TValue>.Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+67 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
               }
            }
            #34: System.Collections.Generic.IDictionary<TKey,TValue>.Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+69 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
               }
            }
            #35: System.Collections.IDictionary.Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+67 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
               }
            }
            #36: System.Collections.IDictionary.Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+69 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
               }
            }
            System.Collections.IDictionary.IsFixedSize = False [System.Boolean]
            System.Collections.IDictionary.IsReadOnly = False [System.Boolean]
            System.Collections.ICollection.IsSynchronized = False [System.Boolean]
            System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
            System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly = False [System.Boolean]
            Count = 0 [System.Int32]
            Comparer = System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction (+1 chars) [System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction]] (see #14)
            #37: Keys = System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System. (+67 chars) [System.Collections.Generic.Dictionary`2+KeyCollection[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TKey>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
               }
            }
            #38: Values = System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,Syste (+69 chars) [System.Collections.Generic.Dictionary`2+ValueCollection[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]]
            {
               properties {
                  System.Collections.Generic.ICollection<TValue>.IsReadOnly = True [System.Boolean]
                  System.Collections.ICollection.IsSynchronized = False [System.Boolean]
                  System.Collections.ICollection.SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
                  Count = 0 [System.Int32]
               }
               fields {
                  dictionary = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Ge (+53 chars) [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single]]] (see #32)
               }
            }
         }
         fields {
            #39: table [System.Int32[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [System.Int32[]] (see #39)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #40: linkSlots [System.Collections.Generic.Link[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [System.Collections.Generic.Link[]] (see #40)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #41: keySlots [BattleTech.Faction[]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot [BattleTech.Faction[]] (see #41)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            #42: valueSlots = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single][] [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single][]]
            {
               properties {
                  Length = 12 [System.Int32]
                  LongLength = 12 [System.Int64]
                  Rank = 1 [System.Int32]
                  IsSynchronized = False [System.Boolean]
                  SyncRoot = System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single][] [System.Collections.Generic.Dictionary`2[BattleTech.Faction,System.Single][]] (see #42)
                  IsFixedSize = True [System.Boolean]
                  IsReadOnly = False [System.Boolean]
               }
            }
            touchedSlots = 0 [System.Int32]
            emptySlot = -1 [System.Int32]
            count = 0 [System.Int32]
            threshold = 10 [System.Int32]
            hcp = System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction (+1 chars) [System.Collections.Generic.EqualityComparer`1+DefaultComparer[BattleTech.Faction]] (see #14)
            serialization_info = <null>
            generation = 0 [System.Int32]
         }
      }
   }
}
